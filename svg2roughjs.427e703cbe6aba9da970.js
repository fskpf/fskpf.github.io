(window["webpackJsonp"] = window["webpackJsonp"] || []).push([["svg2roughjs"],{

/***/ "./node_modules/svg2roughjs/index.js":
/*!*******************************************!*\
  !*** ./node_modules/svg2roughjs/index.js ***!
  \*******************************************/
/*! exports provided: RenderMode, Svg2Roughjs */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"RenderMode\", function() { return RenderMode; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Svg2Roughjs\", function() { return Svg2Roughjs; });\n/* harmony import */ var tinycolor2__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tinycolor2 */ \"./node_modules/tinycolor2/tinycolor.js\");\n/* harmony import */ var tinycolor2__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(tinycolor2__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var svg_pathdata__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! svg-pathdata */ \"./node_modules/svg-pathdata/lib/SVGPathData.module.js\");\n/* harmony import */ var roughjs_bundled_rough_esm__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! roughjs/bundled/rough.esm */ \"./node_modules/roughjs/bundled/rough.esm.js\");\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it[\"return\"] != null) it[\"return\"](); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\n\n\n\n\nvar units = __webpack_require__(/*! units-css */ \"./node_modules/units-css/index.js\");\n/**\r\n * A small helper class that represents a point.\r\n */\n\n\nvar Point = /*#__PURE__*/function () {\n  _createClass(Point, [{\n    key: \"x\",\n\n    /**\r\n     * @return {number}\r\n     */\n    get: function get() {\n      return this.$x;\n    }\n    /**\r\n     * @return {number}\r\n     */\n\n  }, {\n    key: \"y\",\n    get: function get() {\n      return this.$y;\n    }\n    /**\r\n     * @param {number} x\r\n     * @param {number} y\r\n     */\n\n  }]);\n\n  function Point(x, y) {\n    _classCallCheck(this, Point);\n\n    this.$x = x || 0;\n    this.$y = y || 0;\n  }\n\n  _createClass(Point, [{\n    key: \"toString\",\n    value: function toString() {\n      return \"\".concat(this.x, \",\").concat(this.y);\n    }\n  }]);\n\n  return Point;\n}();\n\nvar RenderMode = /*#__PURE__*/function () {\n  function RenderMode() {\n    _classCallCheck(this, RenderMode);\n  }\n\n  _createClass(RenderMode, null, [{\n    key: \"SVG\",\n    get: function get() {\n      return 'RenderMode.SVG';\n    }\n  }, {\n    key: \"CANVAS\",\n    get: function get() {\n      'RenderMode.CANVAS';\n    }\n  }]);\n\n  return RenderMode;\n}();\n/**\r\n * Svg2Roughjs parses a given SVG and draws it with Rough.js\r\n * in a canvas.\r\n */\n\nvar Svg2Roughjs = /*#__PURE__*/function () {\n  _createClass(Svg2Roughjs, [{\n    key: \"svg\",\n\n    /**\r\n     * The SVG that should be converted.\r\n     * Changing this property triggers drawing of the SVG into\r\n     * the canvas or container element with which Svg2Roughjs\r\n     * was initialized.\r\n     * @param {SVGSVGElement} svg\r\n     */\n    set: function set(svg) {\n      if (this.$svg !== svg) {\n        /** @type {SVGSVGElement} */\n        this.$svg = svg;\n\n        if (svg.hasAttribute('width')) {\n          this.width = svg.width.baseVal.value;\n        } else if (svg.hasAttribute('viewBox')) {\n          this.width = svg.viewBox.baseVal.width;\n        } else {\n          this.width = 300;\n        }\n\n        if (svg.hasAttribute('height')) {\n          this.height = svg.height.baseVal.value;\n        } else if (svg.hasAttribute('viewBox')) {\n          this.height = svg.viewBox.baseVal.height;\n        } else {\n          this.height = 150;\n        }\n\n        if (this.renderMode === RenderMode.CANVAS) {\n          this.canvas.width = this.width;\n          this.canvas.height = this.height;\n        } else {\n          this.canvas.setAttribute('width', this.width);\n          this.canvas.setAttribute('height', this.height);\n        } // pre-process defs for subsequent references\n\n\n        this.collectElementsWithID();\n        this.redraw();\n      }\n    }\n    /**\r\n     * @return {SVGSVGElement}\r\n     */\n    ,\n    get: function get() {\n      return this.$svg;\n    }\n    /**\r\n     * Rough.js config object that is provided to Rough.js for drawing\r\n     * any SVG element.\r\n     * Changing this property triggers a repaint.\r\n     * @param {object}\r\n     */\n\n  }, {\n    key: \"roughConfig\",\n    set: function set(config) {\n      this.$roughConfig = config;\n\n      if (this.renderMode === RenderMode.CANVAS) {\n        this.rc = roughjs_bundled_rough_esm__WEBPACK_IMPORTED_MODULE_2__[\"default\"].canvas(this.canvas, this.$roughConfig);\n      } else {\n        this.rc = roughjs_bundled_rough_esm__WEBPACK_IMPORTED_MODULE_2__[\"default\"].svg(this.canvas, this.$roughConfig);\n      }\n\n      this.redraw();\n    }\n    /**\r\n     * @return {object}\r\n     */\n    ,\n    get: function get() {\n      return this.$roughConfig;\n    }\n    /**\r\n     * Set a font-family for the rendering of text elements.\r\n     * If set to `null`, then the font-family of the SVGTextElement is used.\r\n     * By default, 'Comic Sans MS, cursive' is used.\r\n     * Changing this property triggers a repaint.\r\n     * @param {string | null}\r\n     */\n\n  }, {\n    key: \"fontFamily\",\n    set: function set(fontFamily) {\n      if (this.$fontFamily !== fontFamily) {\n        this.$fontFamily = fontFamily;\n        this.redraw();\n      }\n    }\n    /**\r\n     * @returns {string}\r\n     */\n    ,\n    get: function get() {\n      return this.$fontFamily;\n    }\n    /**\r\n     * Whether to randomize Rough.js' fillWeight, hachureAngle and hachureGap.\r\n     * Also randomizes the disableMultiStroke option of Rough.js.\r\n     * By default true.\r\n     * Changing this property triggers a repaint.\r\n     * @param {boolean}\r\n     */\n\n  }, {\n    key: \"randomize\",\n    set: function set(randomize) {\n      this.$randomize = randomize;\n      this.redraw();\n    }\n    /**\r\n     * @returns {boolean}\r\n     */\n    ,\n    get: function get() {\n      return this.$randomize;\n    }\n    /**\r\n     * Optional solid background color with which\r\n     * the canvas should be initialized.\r\n     * It is drawn on a transparent canvas by default.\r\n     * @param {string}\r\n     */\n\n  }, {\n    key: \"backgroundColor\",\n    set: function set(color) {\n      this.$backgroundColor = color;\n    }\n    /**\r\n     * @returns {string}\r\n     */\n    ,\n    get: function get() {\n      return this.$backgroundColor;\n    }\n    /**\r\n     * Changes the output format of the converted SVG.\r\n     * Changing this property, will replace the current output\r\n     * element with either a new HTML canvas or new SVG element.\r\n     * @param {RenderMode} mode\r\n     */\n\n  }, {\n    key: \"renderMode\",\n    set: function set(mode) {\n      if (this.$renderMode === mode) {\n        return;\n      }\n\n      this.$renderMode = mode;\n      var parent = this.canvas.parentElement;\n      parent.removeChild(this.canvas);\n      var target;\n\n      if (mode === RenderMode.CANVAS) {\n        target = document.createElement('canvas');\n        target.width = this.width;\n        target.height = this.height;\n        this.ctx = target.getContext('2d');\n      } else {\n        this.ctx = null;\n        target = document.createElementNS('http://www.w3.org/2000/svg', 'svg');\n        target.setAttribute('xmlns', 'http://www.w3.org/2000/svg');\n        target.setAttribute('xmlns:xlink', 'http://www.w3.org/1999/xlink');\n        target.setAttribute('width', this.width);\n        target.setAttribute('height', this.height);\n      }\n\n      parent.appendChild(target);\n      this.canvas = target;\n\n      if (mode === RenderMode.CANVAS) {\n        this.rc = roughjs_bundled_rough_esm__WEBPACK_IMPORTED_MODULE_2__[\"default\"].canvas(this.canvas, this.$roughConfig);\n      } else {\n        this.rc = roughjs_bundled_rough_esm__WEBPACK_IMPORTED_MODULE_2__[\"default\"].svg(this.canvas, this.$roughConfig);\n      }\n\n      this.redraw();\n    }\n    /**\r\n     * @returns {RenderMode}\r\n     */\n    ,\n    get: function get() {\n      return this.$renderMode;\n    }\n    /**\r\n     * Whether to apply a pencil filter.\r\n     * Only works for SVG render mode.\r\n     * @param {boolean}\r\n     */\n\n  }, {\n    key: \"pencilFilter\",\n    set: function set(value) {\n      if (this.$pencilFilter !== value) {\n        this.$pencilFilter = value;\n        this.redraw();\n      }\n    }\n    /**\r\n     * @returns {boolean}\r\n     */\n    ,\n    get: function get() {\n      return this.$pencilFilter;\n    }\n    /**\r\n     * Creates a new instance of Svg2roughjs.\r\n     * @param {string | HTMLCanvasElement | SVGSVGElement} target Either a selector for the container to which a canvas should be added\r\n     * or an `HTMLCanvasElement` or `SVGSVGElement` that should be used as output target.\r\n     * @param {RenderMode?} renderMode Whether the output should be an SVG or drawn to an HTML canvas.\r\n     * Defaults to SVG or CANVAS depending if the given target is of type `HTMLCanvasElement` or `SVGSVGElement`,\r\n     * otherwise it defaults to SVG.\r\n     * @param {object?} roughConfig Config object this passed to the Rough.js ctor and\r\n     * also used while parsing the styles for `SVGElement`s.\r\n     */\n\n  }], [{\n    key: \"CONTAINS_UNIT_REGEXP\",\n\n    /**\r\n     * A simple regexp which is used to test whether a given string value\r\n     * contains unit identifiers, e.g. \"1px\", \"1em\", \"1%\", ...\r\n     * @private\r\n     * @returns {RegExp}\r\n     */\n    value: function CONTAINS_UNIT_REGEXP() {\n      return /[a-z%]/;\n    }\n  }]);\n\n  function Svg2Roughjs(target) {\n    var renderMode = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : RenderMode.SVG;\n    var roughConfig = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n    _classCallCheck(this, Svg2Roughjs);\n\n    if (!target) {\n      throw new Error('No target provided');\n    }\n\n    if (_typeof(target) === 'object') {\n      if (target.tagName === 'canvas' || target.tagName === 'svg') {\n        this.canvas = target;\n        this.$renderMode = target.tagName === 'canvas' ? RenderMode.CANVAS : RenderMode.SVG;\n      } else {\n        throw new Error('Target object is not of type HMTLCanvaseElement or SVGSVGElement');\n      }\n    } else if (typeof target === 'string') {\n      // create a new HTMLCanvasElement as child of the given element\n      var container = document.querySelector(target);\n\n      if (!container) {\n        throw new Error(\"No element found with \".concat(target));\n      }\n\n      if (renderMode === RenderMode.CANVAS) {\n        this.canvas = document.createElement('canvas');\n        this.canvas.width = container.clientWidth;\n        this.canvas.height = container.clientHeight;\n      } else {\n        this.canvas = document.createElementNS('http://www.w3.org/2000/svg', 'svg');\n        this.canvas.setAttribute('xmlns', 'http://www.w3.org/2000/svg');\n        this.canvas.setAttribute('xmlns:xlink', 'http://www.w3.org/1999/xlink');\n      }\n\n      this.$renderMode = renderMode;\n      container.appendChild(this.canvas);\n    } // the Rough.js instance to draw the SVG elements\n\n\n    if (this.renderMode === RenderMode.CANVAS) {\n      this.rc = roughjs_bundled_rough_esm__WEBPACK_IMPORTED_MODULE_2__[\"default\"].canvas(this.canvas, roughConfig); // canvas context for convenient access\n\n      this.ctx = this.canvas.getContext('2d');\n    } else {\n      this.rc = roughjs_bundled_rough_esm__WEBPACK_IMPORTED_MODULE_2__[\"default\"].svg(this.canvas, roughConfig);\n    }\n\n    this.$roughConfig = roughConfig; // default font family\n\n    this.$fontFamily = 'Comic Sans MS, cursive'; // we randomize the visualization per element by default\n\n    this.$randomize = true;\n  }\n  /**\r\n   * Triggers an entire redraw of the SVG which also\r\n   * processes it anew.\r\n   */\n\n\n  _createClass(Svg2Roughjs, [{\n    key: \"redraw\",\n    value: function redraw() {\n      if (!this.svg) {\n        return;\n      } // reset target element\n\n\n      if (this.renderMode === RenderMode.CANVAS) {\n        this.initializeCanvas(this.canvas);\n      } else {\n        this.initializeSvg(this.canvas);\n      }\n\n      this.processRoot(this.svg, null, this.width, this.height);\n    }\n    /**\r\n     * Prepares the given canvas element depending on the set properties.\r\n     * @private\r\n     * @param {HTMLCanvasElement} canvas\r\n     */\n\n  }, {\n    key: \"initializeCanvas\",\n    value: function initializeCanvas(canvas) {\n      this.ctx = canvas.getContext('2d');\n      this.ctx.clearRect(0, 0, this.width, this.height);\n\n      if (this.backgroundColor) {\n        this.ctx.fillStyle = this.backgroundColor;\n        this.ctx.fillRect(0, 0, this.width, this.height);\n      }\n    }\n    /**\r\n     * Prepares the given SVG element depending on the set properties.\r\n     * @private\r\n     * @param {SVGSVGElement} svgElement\r\n     */\n\n  }, {\n    key: \"initializeSvg\",\n    value: function initializeSvg(svgElement) {\n      // maybe canvas rendering was used before\n      this.ctx = null; // clear SVG element\n\n      while (svgElement.firstChild) {\n        svgElement.removeChild(svgElement.firstChild);\n      } // apply backgroundColor\n\n\n      var backgroundElement;\n\n      if (this.backgroundColor) {\n        backgroundElement = document.createElementNS('http://www.w3.org/2000/svg', 'rect');\n        backgroundElement.width.baseVal.value = this.width;\n        backgroundElement.height.baseVal.value = this.height;\n        backgroundElement.setAttribute('fill', this.backgroundColor);\n        svgElement.appendChild(backgroundElement);\n      } // prepare filter effects\n\n\n      if (this.pencilFilter) {\n        var defs = this.getDefsElement(svgElement);\n        defs.appendChild(SvgTextures.pencilTextureFilter);\n      }\n    }\n    /**\r\n     * Traverses the SVG in DFS and draws each element to the canvas.\r\n     * @private\r\n     * @param {SVGSVGElement | SVGGElement} root either an SVG- or g-element\r\n     * @param {SVGTransform?} svgTransform\r\n     * @param {number?} width Use elements can overwrite width\r\n     * @param {number?} height Use elements can overwrite height\r\n     */\n\n  }, {\n    key: \"processRoot\",\n    value: function processRoot(root, svgTransform, width, height) {\n      // traverse svg in DFS\n      var stack = [];\n\n      if (root.tagName === 'svg' || root.tagName === 'symbol' || root.tagName === 'marker') {\n        var rootX = 0;\n        var rootY = 0;\n\n        if (root.tagName === 'symbol') {\n          rootX = parseFloat(root.getAttribute('x')) || 0;\n          rootY = parseFloat(root.getAttribute('y')) || 0;\n          width = width || parseFloat(root.getAttribute('width')) || void 0;\n          height = height || parseFloat(root.getAttribute('height')) || void 0;\n        } else if (root.tagName === 'marker') {\n          rootX = -root.refX.baseVal.value;\n          rootY = -root.refY.baseVal.value;\n          width = width || parseFloat(root.getAttribute('markerWidth')) || void 0;\n          height = height || parseFloat(root.getAttribute('markerHeight')) || void 0;\n        } else {\n          rootX = root.x.baseVal.value;\n          rootY = root.y.baseVal.value;\n        }\n\n        var rootTransform = this.svg.createSVGMatrix();\n\n        if (typeof width !== 'undefined' && typeof height !== 'undefined' && root.getAttribute('viewBox')) {\n          var _root$viewBox$baseVal = root.viewBox.baseVal,\n              viewBoxX = _root$viewBox$baseVal.x,\n              viewBoxY = _root$viewBox$baseVal.y,\n              viewBoxWidth = _root$viewBox$baseVal.width,\n              viewBoxHeight = _root$viewBox$baseVal.height; // viewBox values might scale the SVGs content\n\n          if (root.tagName === 'marker') {\n            // refX / refY works differently on markers than the x / y attribute\n            rootTransform = rootTransform.translate(-viewBoxX * (width / viewBoxWidth), -viewBoxY * (height / viewBoxHeight)).scaleNonUniform(width / viewBoxWidth, height / viewBoxHeight).translate(rootX, rootY);\n          } else {\n            rootTransform = rootTransform.translate(-viewBoxX * (width / viewBoxWidth), -viewBoxY * (height / viewBoxHeight)).translate(rootX, rootY).scaleNonUniform(width / viewBoxWidth, height / viewBoxHeight);\n          }\n        } else {\n          rootTransform = rootTransform.translate(rootX, rootY);\n        }\n\n        var combinedMatrix = svgTransform ? svgTransform.matrix.multiply(rootTransform) : rootTransform;\n        svgTransform = this.svg.createSVGTransformFromMatrix(combinedMatrix); // don't put the SVG itself into the stack, so start with the children of it\n\n        var children = this.getNodeChildren(root);\n\n        for (var i = children.length - 1; i >= 0; i--) {\n          var child = children[i];\n\n          if (child.tagName === 'symbol' || child.tagName === 'marker') {\n            // symbols and marker can only be instantiated by specific elements\n            continue;\n          }\n\n          var childTransform = svgTransform ? this.getCombinedTransform(child, svgTransform) : this.getSvgTransform(child);\n          stack.push({\n            element: child,\n            transform: childTransform\n          });\n        }\n      } else {\n        stack.push({\n          element: root,\n          transform: svgTransform\n        });\n      }\n\n      while (stack.length > 0) {\n        var _stack$pop = stack.pop(),\n            element = _stack$pop.element,\n            transform = _stack$pop.transform; // maybe draw the element\n\n\n        this.drawElement(element, transform);\n\n        if (element.tagName === 'defs' || element.tagName === 'symbol' || element.tagName === 'marker' || element.tagName === 'svg' || element.tagName === 'clipPath') {\n          // Defs are prepocessed separately.\n          // Symbols and marker can only be instantiated by specific elements.\n          // Don't traverse the SVG element itself. This is done by drawElement -> processRoot.\n          // ClipPaths are not drawn and processed separately.\n          continue;\n        } // process childs\n\n\n        var _children = this.getNodeChildren(element);\n\n        for (var _i = _children.length - 1; _i >= 0; _i--) {\n          var childElement = _children[_i];\n          var newTransform = transform ? this.getCombinedTransform(childElement, transform) : this.getSvgTransform(childElement);\n          stack.push({\n            element: childElement,\n            transform: newTransform\n          });\n        }\n      }\n    }\n    /**\r\n     * Helper method to append the returned `SVGGElement` from\r\n     * Rough.js when drawing in SVG mode.\r\n     * @private\r\n     * @param {SVGElement} element\r\n     * @param {SVGElement} sketchElement\r\n     */\n\n  }, {\n    key: \"postProcessElement\",\n    value: function postProcessElement(element, sketchElement) {\n      if (this.renderMode === RenderMode.SVG && sketchElement) {\n        // maybe apply a clip-path\n        var sketchClipPathId = element.getAttribute('data-sketchy-clip-path');\n\n        if (sketchClipPathId) {\n          sketchElement.setAttribute('clip-path', \"url(#\".concat(sketchClipPathId, \")\"));\n        }\n\n        if (this.pencilFilter && element.tagName !== 'text') {\n          sketchElement.setAttribute('filter', 'url(#pencilTextureFilter)');\n        }\n\n        this.canvas.appendChild(sketchElement);\n      }\n    }\n    /**\r\n     * Combines the given transform with the element's transform.\r\n     * @param {SVGElement} element\r\n     * @param {SVGTransform} transform\r\n     * @returns {SVGTransform}\r\n     */\n\n  }, {\n    key: \"getCombinedTransform\",\n    value: function getCombinedTransform(element, transform) {\n      var elementTransform = this.getSvgTransform(element);\n\n      if (elementTransform) {\n        var elementTransformMatrix = elementTransform.matrix;\n        var combinedMatrix = transform.matrix.multiply(elementTransformMatrix);\n        return this.svg.createSVGTransformFromMatrix(combinedMatrix);\n      }\n\n      return transform;\n    }\n    /**\r\n     * Returns the consolidated of the given element.\r\n     * @private\r\n     * @param {SVGElement} element\r\n     * @returns {SVGTransform|null}\r\n     */\n\n  }, {\n    key: \"getSvgTransform\",\n    value: function getSvgTransform(element) {\n      if (element.transform && element.transform.baseVal.numberOfItems > 0) {\n        return element.transform.baseVal.consolidate();\n      }\n\n      return null;\n    }\n    /**\r\n     * Applies the given svgTransform to the canvas context.\r\n     * @private\r\n     * @param {SVGTransform?} svgTransform\r\n     * @param {SVGElement?} element The element to which the transform should be applied\r\n     * when in SVG mode.\r\n     */\n\n  }, {\n    key: \"applyGlobalTransform\",\n    value: function applyGlobalTransform(svgTransform, element) {\n      if (svgTransform && svgTransform.matrix) {\n        var matrix = svgTransform.matrix;\n\n        if (this.renderMode === RenderMode.CANVAS) {\n          // IE11 doesn't support SVGMatrix as parameter for setTransform\n          this.ctx.setTransform(matrix.a, matrix.b, matrix.c, matrix.d, matrix.e, matrix.f);\n        } else if (this.renderMode === RenderMode.SVG && element) {\n          if (element.transform.baseVal.numberOfItems > 0) {\n            element.transform.baseVal.getItem(0).setMatrix(matrix);\n          } else {\n            element.transform.baseVal.appendItem(svgTransform);\n          }\n        }\n      }\n    }\n    /**\r\n     * Whether the given SVGTransform resembles an identity transform.\r\n     * @private\r\n     * @param {SVGTransform?} svgTransform\r\n     * @returns {boolean} Whether the transform is an identity transform.\r\n     *  Returns true if transform is undefined.\r\n     */\n\n  }, {\n    key: \"isIdentityTransform\",\n    value: function isIdentityTransform(svgTransform) {\n      if (!svgTransform) {\n        return true;\n      }\n\n      var matrix = svgTransform.matrix;\n      return !matrix || matrix.a === 1 && matrix.b === 0 && matrix.c === 0 && matrix.d === 1 && matrix.e === 0 && matrix.f === 0;\n    }\n    /**\r\n     * Whether the given SVGTransform does not scale nor skew.\r\n     * @private\r\n     * @param {SVGTransform?} svgTransform\r\n     * @returns {boolean} Whether the given SVGTransform does not scale nor skew.\r\n     *  Returns true if transform is undefined.\r\n     */\n\n  }, {\n    key: \"isTranslationTransform\",\n    value: function isTranslationTransform(svgTransform) {\n      if (!svgTransform) {\n        return true;\n      }\n\n      var matrix = svgTransform.matrix;\n      return !matrix || matrix.a === 1 && matrix.b === 0 && matrix.c === 0 && matrix.d === 1;\n    }\n    /**\r\n     * Stores elements with IDs for later use.\r\n     * @private\r\n     */\n\n  }, {\n    key: \"collectElementsWithID\",\n    value: function collectElementsWithID() {\n      this.idElements = {};\n      var elementsWithID = Array.prototype.slice.apply(this.svg.querySelectorAll('*[id]'));\n\n      var _iterator = _createForOfIteratorHelper(elementsWithID),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var elt = _step.value;\n          var id = elt.getAttribute('id');\n\n          if (id) {\n            this.idElements[id] = elt;\n          }\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n    }\n    /**\r\n     * Applies a given `SVGTransform` to the point.\r\n     *\r\n     * [a c e] [x] = (a*x + c*y + e)\r\n     * [b d f] [y] = (b*x + d*y + f)\r\n     * [0 0 1] [1] = (0 + 0 + 1)\r\n     *\r\n     * @private\r\n     * @param {Point} point\r\n     * @param {SVGTransform?} svgTransform\r\n     * @return {Point}\r\n     */\n\n  }, {\n    key: \"applyMatrix\",\n    value: function applyMatrix(point, svgTransform) {\n      if (!svgTransform) {\n        return point;\n      }\n\n      var matrix = svgTransform.matrix;\n      var x = matrix.a * point.x + matrix.c * point.y + matrix.e;\n      var y = matrix.b * point.x + matrix.d * point.y + matrix.f;\n      return new Point(x, y);\n    }\n    /**\r\n     * Returns a random number in the given rande.\r\n     * @private\r\n     * @param {number} min\r\n     * @param {number} max\r\n     * @return {number}\r\n     */\n\n  }, {\n    key: \"getRandomNumber\",\n    value: function getRandomNumber(min, max) {\n      return Math.random() * (max - min) + min;\n    }\n    /**\r\n     * Returns the `offset` of an `SVGStopElement`.\r\n     * @private\r\n     * @param {SVGStopElement} stop\r\n     * @return {number} stop percentage\r\n     */\n\n  }, {\n    key: \"getStopOffset\",\n    value: function getStopOffset(stop) {\n      var offset = stop.getAttribute('offset');\n\n      if (!offset) {\n        return 0;\n      }\n\n      if (offset.indexOf('%')) {\n        return parseFloat(offset.substring(0, offset.length - 1));\n      } else {\n        return parseFloat(offset) * 100;\n      }\n    }\n    /**\r\n     * Returns the `stop-color`of an `SVGStopElement`.\r\n     * @private\r\n     * @param {SVGStopElement} stop\r\n     * @return {tinycolor}\r\n     */\n\n  }, {\n    key: \"getStopColor\",\n    value: function getStopColor(stop) {\n      var stopColorStr = stop.getAttribute('stop-color');\n\n      if (!stopColorStr) {\n        var style = stop.getAttribute('style');\n        var match = /stop-color:\\s?(.*);?/.exec(style);\n\n        if (match.length > 1) {\n          stopColorStr = match[1];\n        }\n      }\n\n      return stopColorStr ? tinycolor2__WEBPACK_IMPORTED_MODULE_0___default()(stopColorStr) : tinycolor2__WEBPACK_IMPORTED_MODULE_0___default()('white');\n    }\n    /**\r\n     * Converts an SVG gradient to a color by mixing all stop colors\r\n     * with `tinycolor.mix`.\r\n     * @private\r\n     * @param {SVGLinearGradientElement | SVGRadialGradientElement} gradient\r\n     * @param {number} opacity\r\n     * @return {string}\r\n     */\n\n  }, {\n    key: \"gradientToColor\",\n    value: function gradientToColor(gradient, opacity) {\n      var _this = this;\n\n      var stops = Array.prototype.slice.apply(gradient.querySelectorAll('stop'));\n\n      if (stops.length === 0) {\n        return 'transparent';\n      } else if (stops.length === 1) {\n        var color = this.getStopColor(stop);\n        color.setAlpha(opacity);\n        return color.toString();\n      } else {\n        // combine the gradient\n        var mixedColor = stops.reduce(function (acc, stop) {\n          var color = _this.getStopColor(stop);\n\n          var offset = _this.getStopOffset(stop);\n\n          return tinycolor2__WEBPACK_IMPORTED_MODULE_0___default.a.mix(acc, color, offset);\n        });\n        mixedColor.setAlpha(opacity);\n        return mixedColor.toString();\n      }\n    }\n    /**\r\n     * Returns the id from the url string\r\n     * @private\r\n     * @param {string} url\r\n     * @returns {string}\r\n     */\n\n  }, {\n    key: \"getIdFromUrl\",\n    value: function getIdFromUrl(url) {\n      var result = /url\\('#?(.*?)'\\)/.exec(url) || /url\\(\"#?(.*?)\"\\)/.exec(url) || /url\\(#?(.*?)\\)/.exec(url);\n\n      if (result && result.length > 1) {\n        return result[1];\n      }\n\n      return null;\n    }\n    /**\r\n     * Parses a `fill` url by looking in the SVG `defs` element.\r\n     * When a gradient is found, it is converted to a color and stored\r\n     * in the internal defs store for this url.\r\n     * @private\r\n     * @param {string} url\r\n     * @param {number} opacity\r\n     * @return {string}\r\n     */\n\n  }, {\n    key: \"parseFillUrl\",\n    value: function parseFillUrl(url, opacity) {\n      var id = this.getIdFromUrl(url);\n\n      if (!id) {\n        return 'transparent';\n      }\n\n      var fill = this.idElements[id];\n\n      if (fill) {\n        if (typeof fill === 'string') {\n          // maybe it was already parsed and replaced with a color\n          return fill;\n        } else {\n          if (fill.tagName === 'linearGradient' || fill.tagName === 'radialGradient') {\n            var color = this.gradientToColor(fill, opacity);\n            this.idElements[id] = color;\n            return color;\n          }\n        }\n      }\n    }\n    /**\r\n     * Converts SVG opacity attributes to a [0, 1] range.\r\n     * @private\r\n     * @param {SVGElement} element\r\n     * @param {string} attribute\r\n     */\n\n  }, {\n    key: \"getOpacity\",\n    value: function getOpacity(element, attribute) {\n      var attr = getComputedStyle(element)[attribute] || element.getAttribute(attribute);\n\n      if (attr) {\n        if (attr.indexOf('%') !== -1) {\n          return Math.min(1, Math.max(0, parseFloat(attr.substring(0, attr.length - 1)) / 100));\n        }\n\n        return Math.min(1, Math.max(0, parseFloat(attr)));\n      }\n\n      return 1;\n    }\n    /**\r\n     * Traverses the given elements hierarchy bottom-up to determine its effective\r\n     * opacity attribute.\r\n     * @private\r\n     * @param {SVGElement} element\r\n     * @param {number} currentOpacity\r\n     * @param {object?} currentUseCtx Consider different DOM hierarchy for use elements\r\n     * @returns {number}\r\n     */\n\n  }, {\n    key: \"getEffectiveElementOpacity\",\n    value: function getEffectiveElementOpacity(element, currentOpacity, currentUseCtx) {\n      var attr;\n\n      if (!currentUseCtx) {\n        attr = getComputedStyle(element)['opacity'] || element.getAttribute('opacity');\n      } else {\n        // use elements traverse a different parent-hierarchy, thus we cannot use getComputedStyle here\n        attr = element.getAttribute('opacity');\n      }\n\n      if (attr) {\n        var elementOpacity = 1;\n\n        if (attr.indexOf('%') !== -1) {\n          elementOpacity = Math.min(1, Math.max(0, parseFloat(attr.substring(0, attr.length - 1)) / 100));\n        } else {\n          elementOpacity = Math.min(1, Math.max(0, parseFloat(attr)));\n        } // combine opacities\n\n\n        currentOpacity *= elementOpacity;\n      } // traverse upwards to combine parent opacities as well\n\n\n      var parent = element.parentElement;\n      var useCtx = currentUseCtx;\n      var nextCtx = useCtx;\n\n      if (useCtx && useCtx.referenced === element) {\n        // switch context and traverse the use-element parent now\n        parent = useCtx.root;\n        nextCtx = useCtx.parentContext;\n      }\n\n      if (!parent || parent === this.$svg) {\n        return currentOpacity;\n      }\n\n      return this.getEffectiveElementOpacity(parent, currentOpacity, nextCtx);\n    }\n    /**\r\n     * Returns the attribute value of an element under consideration\r\n     * of inherited attributes from the `parentElement`.\r\n     * @private\r\n     * @param {SVGElement} element\r\n     * @param {string} attributeName Name of the attribute to look up\r\n     * @param {object?} currentUseCtx Consider different DOM hierarchy for use elements\r\n     * @return {string|null} attribute value if it exists\r\n     */\n\n  }, {\n    key: \"getEffectiveAttribute\",\n    value: function getEffectiveAttribute(element, attributeName, currentUseCtx) {\n      // getComputedStyle doesn't work for, e.g. <svg fill='rgba(...)'>\n      var attr;\n\n      if (!currentUseCtx) {\n        attr = getComputedStyle(element)[attributeName] || element.getAttribute(attributeName);\n      } else {\n        // use elements traverse a different parent-hierarchy, thus we cannot use getComputedStyle here\n        attr = element.getAttribute(attributeName);\n      }\n\n      if (!attr) {\n        var parent = element.parentElement;\n        var useCtx = currentUseCtx;\n        var nextCtx = useCtx;\n\n        if (useCtx && useCtx.referenced === element) {\n          // switch context and traverse the use-element parent now\n          parent = useCtx.root;\n          nextCtx = useCtx.parentContext;\n        }\n\n        if (!parent || parent === this.$svg) {\n          return null;\n        }\n\n        return this.getEffectiveAttribute(parent, attributeName, nextCtx);\n      }\n\n      return attr;\n    }\n    /**\r\n     * Converts the given string to px unit. May be either a <length>\r\n     * (https://developer.mozilla.org/de/docs/Web/SVG/Content_type#Length)\r\n     * or a <percentage>\r\n     * (https://developer.mozilla.org/de/docs/Web/SVG/Content_type#Percentage).\r\n     * @private\r\n     * @param {string} value\r\n     * @returns {number} THe value in px unit\r\n     */\n\n  }, {\n    key: \"convertToPixelUnit\",\n    value: function convertToPixelUnit(value) {\n      // css-units fails for converting from unit-less to 'px' in IE11,\n      // thus we only apply it to non-px values\n      if (value.match(Svg2Roughjs.CONTAINS_UNIT_REGEXP) !== null) {\n        return units.convert('px', value, this.$svg);\n      }\n\n      return parseFloat(value);\n    }\n    /**\r\n     * Converts the effective style attributes of the given `SVGElement`\r\n     * to a Rough.js config object that is used to draw the element with\r\n     * Rough.js.\r\n     * @private\r\n     * @param {SVGElement} element\r\n     * @param {SVGTransform?} svgTransform\r\n     * @return {object} config for Rough.js drawing\r\n     */\n\n  }, {\n    key: \"parseStyleConfig\",\n    value: function parseStyleConfig(element, svgTransform) {\n      var _this2 = this;\n\n      var config = Object.assign({}, this.$roughConfig); // Scalefactor for certain style attributes. For lack of a better option here, use the determinant\n\n      var scaleFactor = 1;\n\n      if (!this.isIdentityTransform(svgTransform)) {\n        var m = svgTransform.matrix;\n        var det = m.a * m.d - m.c * m.b;\n        scaleFactor = Math.sqrt(det);\n      } // incorporate the elements base opacity\n\n\n      var elementOpacity = this.getEffectiveElementOpacity(element, 1, this.$useElementContext);\n      var fill = this.getEffectiveAttribute(element, 'fill', this.$useElementContext) || 'black';\n      var fillOpacity = elementOpacity * this.getOpacity(element, 'fill-opacity');\n\n      if (fill) {\n        if (fill.indexOf('url') !== -1) {\n          config.fill = this.parseFillUrl(fill, fillOpacity);\n        } else if (fill === 'none') {\n          delete config.fill;\n        } else {\n          var color = tinycolor2__WEBPACK_IMPORTED_MODULE_0___default()(fill);\n          color.setAlpha(fillOpacity);\n          config.fill = color.toString();\n        }\n      }\n\n      var stroke = this.getEffectiveAttribute(element, 'stroke', this.$useElementContext);\n      var strokeOpacity = elementOpacity * this.getOpacity(element, 'stroke-opacity');\n\n      if (stroke) {\n        if (stroke.indexOf('url') !== -1) {\n          config.stroke = this.parseFillUrl(fill, strokeOpacity);\n        } else if (stroke === 'none') {\n          config.stroke = 'none';\n        } else {\n          var _color = tinycolor2__WEBPACK_IMPORTED_MODULE_0___default()(stroke);\n\n          _color.setAlpha(strokeOpacity);\n\n          config.stroke = _color.toString();\n        }\n      } else {\n        config.stroke = 'none';\n      }\n\n      var strokeWidth = this.getEffectiveAttribute(element, 'stroke-width', this.$useElementContext);\n\n      if (strokeWidth) {\n        // Convert to user space units (px)\n        config.strokeWidth = this.convertToPixelUnit(strokeWidth) * scaleFactor;\n      } else {\n        config.strokeWidth = 0;\n      }\n\n      var strokeDashArray = this.getEffectiveAttribute(element, 'stroke-dasharray', this.$useElementContext);\n\n      if (strokeDashArray && strokeDashArray !== 'none') {\n        strokeDashArray = strokeDashArray.split(/[\\s,]+/).filter(function (entry) {\n          return entry.length > 0;\n        }) // make sure that dashes/dots are at least somewhat visible\n        .map(function (dash) {\n          return Math.max(0.5, _this2.convertToPixelUnit(dash) * scaleFactor);\n        });\n        config.strokeLineDash = strokeDashArray;\n      }\n\n      var strokeDashOffset = this.getEffectiveAttribute(element, 'stroke-dashoffset', this.$useElementContext);\n\n      if (strokeDashOffset) {\n        strokeDashOffset = this.convertToPixelUnit(strokeDashOffset);\n        config.strokeLineDashOffset = strokeDashOffset * scaleFactor;\n      } // unstroked but filled shapes look weird, so always apply a stroke if we fill something\n\n\n      if (config.fill && config.stroke === 'none') {\n        config.stroke = config.fill;\n        config.strokeWidth = 1;\n      } // nested paths should be filled twice, see\n      // https://github.com/rough-stuff/rough/issues/158\n      // however, fill-rule is still problematic, see\n      // https://github.com/rough-stuff/rough/issues/131\n\n\n      if (typeof config.combineNestedSvgPaths === 'undefined') {\n        config.combineNestedSvgPaths = true;\n      }\n\n      if (this.randomize) {\n        // Rough.js default is 0.5 * strokeWidth\n        config.fillWeight = this.getRandomNumber(0.5, 3); // Rough.js default is -41deg\n\n        config.hachureAngle = this.getRandomNumber(-30, -50); // Rough.js default is 4 * strokeWidth\n\n        config.hachureGap = this.getRandomNumber(3, 5); // randomize double stroke effect if not explicitly set through user config\n\n        if (typeof config.disableMultiStroke === 'undefined') {\n          config.disableMultiStroke = Math.random() > 0.3;\n        }\n      }\n\n      return config;\n    }\n    /**\r\n     * @private\r\n     * @param {SVGSVGElement}\r\n     * @returns {SVGDefsElement}\r\n     */\n\n  }, {\n    key: \"getDefsElement\",\n    value: function getDefsElement(svgElement) {\n      var outputDefs = svgElement.querySelector('defs');\n\n      if (!outputDefs) {\n        outputDefs = document.createElementNS('http://www.w3.org/2000/svg', 'defs');\n\n        if (svgElement.childElementCount > 0) {\n          svgElement.insertBefore(outputDefs, svgElement.firstElementChild);\n        } else {\n          svgElement.appendChild(outputDefs);\n        }\n      }\n\n      return outputDefs;\n    }\n    /**\r\n     * Applies the clip-path to the CanvasContext.\r\n     * @private\r\n     * @param {SVGElement} owner\r\n     * @param {string} clipPathAttr\r\n     * @param {SVGTransform?} svgTransform\r\n     */\n\n  }, {\n    key: \"applyClipPath\",\n    value: function applyClipPath(owner, clipPathAttr, svgTransform) {\n      var id = this.getIdFromUrl(clipPathAttr);\n\n      if (!id) {\n        return;\n      }\n\n      var clipPath = this.idElements[id];\n\n      if (!clipPath) {\n        return;\n      } // TODO clipPath: consider clipPathUnits\n\n\n      var clipContainer;\n\n      if (this.renderMode === RenderMode.CANVAS) {\n        // for a canvas, we just apply a 'ctx.clip()' path\n        this.ctx.beginPath();\n      } else {\n        // for SVG output we create clipPath defs\n        var targetDefs = this.getDefsElement(this.canvas); // unfortunately, we cannot reuse clip-paths due to the 'global transform' approach\n\n        var sketchClipPathId = \"\".concat(id, \"_\").concat(targetDefs.childElementCount);\n        clipContainer = document.createElementNS('http://www.w3.org/2000/svg', 'clipPath');\n        clipContainer.id = sketchClipPathId; // remember the new id by storing it on the owner element\n\n        owner.setAttribute('data-sketchy-clip-path', sketchClipPathId);\n        targetDefs.appendChild(clipContainer);\n      } // traverse clip-path elements in DFS\n\n\n      var stack = [];\n      var children = this.getNodeChildren(clipPath);\n\n      for (var i = children.length - 1; i >= 0; i--) {\n        var childElement = children[i];\n        var childTransform = svgTransform ? this.getCombinedTransform(childElement, svgTransform) : this.getSvgTransform(childElement);\n        stack.push({\n          element: childElement,\n          transform: childTransform\n        });\n      }\n\n      while (stack.length > 0) {\n        var _stack$pop2 = stack.pop(),\n            element = _stack$pop2.element,\n            transform = _stack$pop2.transform;\n\n        this.applyElementClip(element, clipContainer, transform);\n\n        if (element.tagName === 'defs' || element.tagName === 'svg' || element.tagName === 'clipPath' || element.tagName === 'text') {\n          // some elements are ignored on clippaths\n          continue;\n        } // process childs\n\n\n        var _children2 = this.getNodeChildren(element);\n\n        for (var _i2 = _children2.length - 1; _i2 >= 0; _i2--) {\n          var _childElement = _children2[_i2];\n\n          var _childTransform = transform ? this.getCombinedTransform(_childElement, transform) : this.getSvgTransform(_childElement);\n\n          stack.push({\n            element: _childElement,\n            transform: _childTransform\n          });\n        }\n      }\n\n      if (this.renderMode === RenderMode.CANVAS) {\n        this.ctx.clip();\n      }\n    }\n    /**\r\n     * Applies the element as clip to the CanvasContext.\r\n     * @private\r\n     * @param {SVGElement} element\r\n     * @param {SVGClipPathElement} container\r\n     * @param {SVGTransform?} svgTransform\r\n     */\n\n  }, {\n    key: \"applyElementClip\",\n    value: function applyElementClip(element, container, svgTransform) {\n      switch (element.tagName) {\n        case 'rect':\n          this.applyRectClip(element, container, svgTransform);\n          break;\n\n        case 'circle':\n          this.applyCircleClip(element, container, svgTransform);\n          break;\n\n        case 'ellipse':\n          this.applyEllipseClip(element, container, svgTransform);\n          break;\n\n        case 'polygon':\n          this.applyPolygonClip(element, container, svgTransform);\n          break;\n        // TODO clipPath: more elements\n      }\n    }\n    /**\r\n     * @private\r\n     * @param {SVGElement} element\r\n     */\n\n  }, {\n    key: \"isHidden\",\n    value: function isHidden(element) {\n      var style = element.style;\n\n      if (!style) {\n        return false;\n      }\n\n      return style.display === 'none' || style.visibility === 'hidden';\n    }\n    /**\r\n     * The main switch to delegate drawing of `SVGElement`s\r\n     * to different subroutines.\r\n     * @private\r\n     * @param {SVGElement} element\r\n     * @param {SVGTransform} svgTransform\r\n     */\n\n  }, {\n    key: \"drawElement\",\n    value: function drawElement(element, svgTransform) {\n      if (this.isHidden(element)) {\n        // just skip hidden elements\n        return;\n      } // possibly apply a clip on the canvas before drawing on it\n\n\n      var clipPath = element.getAttribute('clip-path');\n\n      if (clipPath) {\n        if (this.renderMode === RenderMode.CANVAS) {\n          this.ctx.save();\n        }\n\n        this.applyClipPath(element, clipPath, svgTransform);\n      }\n\n      switch (element.tagName) {\n        case 'svg':\n        case 'symbol':\n          this.drawRoot(element, svgTransform);\n          break;\n\n        case 'rect':\n          this.drawRect(element, svgTransform);\n          break;\n\n        case 'path':\n          this.drawPath(element, svgTransform);\n          break;\n\n        case 'use':\n          this.drawUse(element, svgTransform);\n          break;\n\n        case 'line':\n          this.drawLine(element, svgTransform);\n          break;\n\n        case 'circle':\n          this.drawCircle(element, svgTransform);\n          break;\n\n        case 'ellipse':\n          this.drawEllipse(element, svgTransform);\n          break;\n\n        case 'polyline':\n          this.drawPolyline(element, svgTransform);\n          break;\n\n        case 'polygon':\n          this.drawPolygon(element, svgTransform);\n          break;\n\n        case 'text':\n          this.drawText(element, svgTransform);\n          break;\n\n        case 'image':\n          this.drawImage(element, svgTransform);\n          break;\n      } // re-set the clip for the next element\n\n\n      if (clipPath) {\n        if (this.renderMode === RenderMode.CANVAS) {\n          this.ctx.restore();\n        }\n      }\n    }\n    /**\r\n     * @private\r\n     * @param {SVGPathElement|SVGLineElement|SVGPolylineElement|SVGPolygonElement} element\r\n     * @param {Point[]} points Array of coordinates\r\n     * @param {SVGTransform?}\r\n     */\n\n  }, {\n    key: \"drawMarkers\",\n    value: function drawMarkers(element, points, svgTransform) {\n      if (points.length === 0) {\n        return;\n      } // consider scaled coordinate system for markerWidth/markerHeight\n\n\n      var markerUnits = element.getAttribute('markerUnits');\n      var scaleFactor = 1;\n\n      if (!markerUnits || markerUnits === 'strokeWidth') {\n        var strokeWidth = this.getEffectiveAttribute(element, 'stroke-width', null);\n\n        if (strokeWidth) {\n          scaleFactor = this.convertToPixelUnit(strokeWidth);\n        }\n      } // start marker\n\n\n      var markerStartId = this.getIdFromUrl(element.getAttribute('marker-start'));\n      var markerStartElement = markerStartId ? this.idElements[markerStartId] : null;\n\n      if (markerStartElement) {\n        var angle = markerStartElement.orientAngle.baseVal.value;\n\n        if (points.length > 1) {\n          var orientAttr = markerStartElement.getAttribute('orient');\n\n          if (orientAttr === 'auto' || orientAttr === 'auto-start-reverse') {\n            var autoAngle = this.getAngle(points[0], points[1]);\n            angle = orientAttr === 'auto' ? autoAngle : autoAngle + 180;\n          }\n        }\n\n        var location = points[0];\n        var matrix = this.svg.createSVGMatrix().translate(location.x, location.y).rotate(angle).scale(scaleFactor);\n        var combinedMatrix = svgTransform ? svgTransform.matrix.multiply(matrix) : matrix;\n        var markerTransform = this.svg.createSVGTransformFromMatrix(combinedMatrix);\n        this.processRoot(markerStartElement, markerTransform);\n      } // end marker\n\n\n      var markerEndId = this.getIdFromUrl(element.getAttribute('marker-end'));\n      var markerEndElement = markerEndId ? this.idElements[markerEndId] : null;\n\n      if (markerEndElement) {\n        var _angle = markerEndElement.orientAngle.baseVal.value;\n\n        if (points.length > 1) {\n          var _orientAttr = markerEndElement.getAttribute('orient');\n\n          if (_orientAttr === 'auto' || _orientAttr === 'auto-start-reverse') {\n            _angle = this.getAngle(points[points.length - 2], points[points.length - 1]);\n          }\n        }\n\n        var _location = points[points.length - 1];\n\n        var _matrix = this.svg.createSVGMatrix().translate(_location.x, _location.y).rotate(_angle).scale(scaleFactor);\n\n        var _combinedMatrix = svgTransform ? svgTransform.matrix.multiply(_matrix) : _matrix;\n\n        var _markerTransform = this.svg.createSVGTransformFromMatrix(_combinedMatrix);\n\n        this.processRoot(markerEndElement, _markerTransform);\n      } // mid marker(s)\n\n\n      var markerMidId = this.getIdFromUrl(element.getAttribute('marker-mid'));\n      var markerMidElement = markerMidId ? this.idElements[markerMidId] : null;\n\n      if (markerMidElement && points.length > 2) {\n        for (var i = 0; i < points.length; i++) {\n          var loc = points[i];\n\n          if (i === 0 || i === points.length - 1) {\n            // mid markers are not drawn on first or last point\n            continue;\n          }\n\n          var _angle2 = markerMidElement.orientAngle.baseVal.value;\n\n          var _orientAttr2 = markerMidElement.getAttribute('orient');\n\n          if (_orientAttr2 === 'auto' || _orientAttr2 === 'auto-start-reverse') {\n            var prevPt = points[i - 1];\n            var nextPt = points[i + 1]; // https://www.w3.org/TR/SVG11/painting.html#OrientAttribute\n            // use angle bisector of incoming and outgoing angle\n\n            var inAngle = this.getAngle(prevPt, loc);\n            var outAngle = this.getAngle(loc, nextPt);\n            var reverse = nextPt.x < loc.x ? 180 : 0;\n            _angle2 = (inAngle + outAngle) / 2 + reverse;\n          }\n\n          var _matrix2 = this.svg.createSVGMatrix().translate(loc.x, loc.y).rotate(_angle2).scale(scaleFactor);\n\n          var _combinedMatrix2 = svgTransform ? svgTransform.matrix.multiply(_matrix2) : _matrix2;\n\n          var _markerTransform2 = this.svg.createSVGTransformFromMatrix(_combinedMatrix2);\n\n          this.processRoot(markerMidElement, _markerTransform2);\n        }\n      }\n    }\n    /**\r\n     * The angle in degree of the line defined by the given points.\r\n     * @private\r\n     * @param {Point} p0\r\n     * @param {Point} p1\r\n     * @returns {number}\r\n     */\n\n  }, {\n    key: \"getAngle\",\n    value: function getAngle(p0, p1) {\n      return Math.atan2(p1.y - p0.y, p1.x - p0.x) * (180 / Math.PI);\n    }\n    /**\r\n     * @private\r\n     * @param {SVGPolylineElement} polyline\r\n     * @param {SVGTransform?} svgTransform\r\n     */\n\n  }, {\n    key: \"drawPolyline\",\n    value: function drawPolyline(polyline, svgTransform) {\n      var _this3 = this;\n\n      var points = this.getPointsArray(polyline);\n      var transformed = points.map(function (p) {\n        var pt = _this3.applyMatrix(p, svgTransform);\n\n        return [pt.x, pt.y];\n      });\n      var style = this.parseStyleConfig(polyline, svgTransform);\n\n      if (style.fill && style.fill !== 'none') {\n        var fillStyle = Object.assign({}, style);\n        fillStyle.stroke = 'none';\n        this.postProcessElement(polyline, this.rc.polygon(transformed, fillStyle));\n      }\n\n      this.postProcessElement(polyline, this.rc.linearPath(transformed, style));\n      this.drawMarkers(polyline, points, svgTransform);\n    }\n    /**\r\n     * @private\r\n     * @param {SVGPolygonElement | SVGPolylineElement} element\r\n     * @returns {Array<Point>}\r\n     */\n\n  }, {\n    key: \"getPointsArray\",\n    value: function getPointsArray(element) {\n      var pointsAttr = element.getAttribute('points');\n\n      if (!pointsAttr) {\n        return [];\n      }\n\n      var coordinateRegexp;\n\n      if (pointsAttr.indexOf(' ') > 0) {\n        // just assume that the coordinates (or pairs) are separated with space\n        coordinateRegexp = /\\s+/g;\n      } else {\n        // there are no spaces, so assume comma separators\n        coordinateRegexp = /,/g;\n      }\n\n      var pointList = pointsAttr.split(coordinateRegexp);\n      var points = [];\n\n      for (var i = 0; i < pointList.length; i++) {\n        var currentEntry = pointList[i];\n        var coordinates = currentEntry.split(',');\n\n        if (coordinates.length === 2) {\n          points.push(new Point(parseFloat(coordinates[0]), parseFloat(coordinates[1])));\n        } else {\n          // space as separators, take next entry as y coordinate\n          var next = i + 1;\n\n          if (next < pointList.length) {\n            points.push(new Point(parseFloat(currentEntry), parseFloat(pointList[next]))); // skip the next entry\n\n            i = next;\n          }\n        }\n      }\n\n      return points;\n    }\n    /**\r\n     * @private\r\n     * @param {SVGPolygonElement} polygon\r\n     * @param {SVGClipPathElement?} container\r\n     * @param {SVGTransform?} svgTransform\r\n     */\n\n  }, {\n    key: \"applyPolygonClip\",\n    value: function applyPolygonClip(polygon, container, svgTransform) {\n      if (this.renderMode === RenderMode.CANVAS) {\n        var points = this.getPointsArray(polygon); // in the clip case, we can actually transform the entire\n        // canvas without distorting the hand-drawn style\n\n        if (points.length > 0) {\n          this.ctx.save();\n          this.applyGlobalTransform(svgTransform);\n          var startPt = points[0];\n          this.ctx.moveTo(startPt.x, startPt.y);\n\n          for (var i = 1; i < points.length; i++) {\n            var pt = points[i];\n            this.ctx.lineTo(pt.x, pt.y);\n          }\n\n          this.ctx.closePath();\n          this.ctx.restore();\n        }\n      } else {\n        var clip = document.createElementNS('http://www.w3.org/2000/svg', 'polygon');\n        clip.setAttribute('points', polygon.getAttribute('points'));\n        this.applyGlobalTransform(svgTransform, clip);\n        container.appendChild(clip);\n      }\n    }\n    /**\r\n     * @private\r\n     * @param {SVGPolygonElement} polygon\r\n     * @param {SVGTransform?} svgTransform\r\n     */\n\n  }, {\n    key: \"drawPolygon\",\n    value: function drawPolygon(polygon, svgTransform) {\n      var _this4 = this;\n\n      var points = this.getPointsArray(polygon);\n      var transformed = points.map(function (p) {\n        var pt = _this4.applyMatrix(p, svgTransform);\n\n        return [pt.x, pt.y];\n      });\n      this.postProcessElement(polygon, this.rc.polygon(transformed, this.parseStyleConfig(polygon, svgTransform))); // https://www.w3.org/TR/SVG11/painting.html#MarkerProperties\n      // Note that for a ‘path’ element which ends with a closed sub-path,\n      // the last vertex is the same as the initial vertex on the given\n      // sub-path (same applies to polygon).\n\n      if (points.length > 0) {\n        points.push(points[0]);\n        this.drawMarkers(polygon, points, svgTransform);\n      }\n    }\n    /**\r\n     * @private\r\n     * @param {SVGEllipseElement} ellipse\r\n     * @param {SVGClipPathElement} container\r\n     * @param {SVGTransform?} svgTransform\r\n     */\n\n  }, {\n    key: \"applyEllipseClip\",\n    value: function applyEllipseClip(ellipse, container, svgTransform) {\n      var cx = ellipse.cx.baseVal.value;\n      var cy = ellipse.cy.baseVal.value;\n      var rx = ellipse.rx.baseVal.value;\n      var ry = ellipse.ry.baseVal.value;\n\n      if (rx === 0 || ry === 0) {\n        // zero-radius ellipse is not rendered\n        return;\n      }\n\n      if (this.renderMode === RenderMode.CANVAS) {\n        // in the clip case, we can actually transform the entire\n        // canvas without distorting the hand-drawn style\n        this.ctx.save();\n        this.applyGlobalTransform(svgTransform);\n        this.ctx.ellipse(cx, cy, rx, ry, 0, 0, 2 * Math.PI);\n        this.ctx.restore();\n      } else {\n        var clip = document.createElementNS('http://www.w3.org/2000/svg', 'ellipse');\n        clip.cx.baseVal.value = cx;\n        clip.cy.baseVal.value = cy;\n        clip.rx.baseVal.value = rx;\n        clip.ry.baseVal.value = ry;\n        this.applyGlobalTransform(svgTransform, clip);\n        container.appendChild(clip);\n      }\n    }\n    /**\r\n     * @private\r\n     * @param {SVGEllipseElement} ellipse\r\n     * @param {SVGTransform?} svgTransform\r\n     */\n\n  }, {\n    key: \"drawEllipse\",\n    value: function drawEllipse(ellipse, svgTransform) {\n      var cx = ellipse.cx.baseVal.value;\n      var cy = ellipse.cy.baseVal.value;\n      var rx = ellipse.rx.baseVal.value;\n      var ry = ellipse.ry.baseVal.value;\n\n      if (rx === 0 || ry === 0) {\n        // zero-radius ellipse is not rendered\n        return;\n      }\n\n      var result;\n\n      if (this.isIdentityTransform(svgTransform) || this.isTranslationTransform(svgTransform)) {\n        // Simple case, there's no transform and we can use the ellipse command\n        var center = this.applyMatrix(new Point(cx, cy), svgTransform); // transform a point on the ellipse to get the transformed radius\n\n        var radiusPoint = this.applyMatrix(new Point(cx + rx, cy + ry), svgTransform);\n        var transformedWidth = 2 * (radiusPoint.x - center.x);\n        var transformedHeight = 2 * (radiusPoint.y - center.y);\n        result = this.rc.ellipse(center.x, center.y, transformedWidth, transformedHeight, this.parseStyleConfig(ellipse, svgTransform));\n      } else {\n        // in other cases we need to construct the path manually.\n        var factor = 4 / 3 * (Math.sqrt(2) - 1);\n        var p1 = this.applyMatrix(new Point(cx + rx, cy), svgTransform);\n        var p2 = this.applyMatrix(new Point(cx, cy + ry), svgTransform);\n        var p3 = this.applyMatrix(new Point(cx - rx, cy), svgTransform);\n        var p4 = this.applyMatrix(new Point(cx, cy - ry), svgTransform);\n        var c1 = this.applyMatrix(new Point(cx + rx, cy + factor * ry), svgTransform);\n        var c2 = this.applyMatrix(new Point(cx + factor * rx, cy + ry), svgTransform);\n        var c4 = this.applyMatrix(new Point(cx - rx, cy + factor * ry), svgTransform);\n        var c6 = this.applyMatrix(new Point(cx - factor * rx, cy - ry), svgTransform);\n        var c8 = this.applyMatrix(new Point(cx + rx, cy - factor * ry), svgTransform);\n        var path = \"M \".concat(p1, \" C \").concat(c1, \" \").concat(c2, \" \").concat(p2, \" S \").concat(c4, \" \").concat(p3, \" S \").concat(c6, \" \").concat(p4, \" S \").concat(c8, \" \").concat(p1, \"z\");\n        result = this.rc.path(path, this.parseStyleConfig(ellipse, svgTransform));\n      }\n\n      this.postProcessElement(ellipse, result);\n    }\n    /**\r\n     * @private\r\n     * @param {SVGCircleElement} circle\r\n     * @param {SVGClipPathElement} container\r\n     * @param {SVGTransform?} svgTransform\r\n     */\n\n  }, {\n    key: \"applyCircleClip\",\n    value: function applyCircleClip(circle, container, svgTransform) {\n      var cx = circle.cx.baseVal.value;\n      var cy = circle.cy.baseVal.value;\n      var r = circle.r.baseVal.value;\n\n      if (r === 0) {\n        // zero-radius circle is not rendered\n        return;\n      }\n\n      if (this.renderMode === RenderMode.CANVAS) {\n        // in the clip case, we can actually transform the entire\n        // canvas without distorting the hand-drawn style\n        this.ctx.save();\n        this.applyGlobalTransform(svgTransform);\n        this.ctx.ellipse(cx, cy, r, r, 0, 0, 2 * Math.PI);\n        this.ctx.restore();\n      } else {\n        var clip = document.createElementNS('http://www.w3.org/2000/svg', 'circle');\n        clip.cx.baseVal.value = cx;\n        clip.cy.baseVal.value = cy;\n        clip.r.baseVal.value = r;\n        this.applyGlobalTransform(svgTransform, clip);\n        container.appendChild(clip);\n      }\n    }\n    /**\r\n     * @private\r\n     * @param {SVGCircleElement} circle\r\n     * @param {SVGTransform?} svgTransform\r\n     */\n\n  }, {\n    key: \"drawCircle\",\n    value: function drawCircle(circle, svgTransform) {\n      var cx = circle.cx.baseVal.value;\n      var cy = circle.cy.baseVal.value;\n      var r = circle.r.baseVal.value;\n\n      if (r === 0) {\n        // zero-radius circle is not rendered\n        return;\n      }\n\n      var center = this.applyMatrix(new Point(cx, cy), svgTransform);\n      var result;\n\n      if (this.isIdentityTransform(svgTransform) || this.isTranslationTransform(svgTransform)) {\n        // transform a point on the ellipse to get the transformed radius\n        var radiusPoint = this.applyMatrix(new Point(cx + r, cy + r), svgTransform);\n        var transformedWidth = 2 * (radiusPoint.x - center.x);\n        result = this.rc.circle(center.x, center.y, transformedWidth, this.parseStyleConfig(circle, svgTransform));\n      } else {\n        // in other cases we need to construct the path manually.\n        var factor = 4 / 3 * (Math.sqrt(2) - 1);\n        var p1 = this.applyMatrix(new Point(cx + r, cy), svgTransform);\n        var p2 = this.applyMatrix(new Point(cx, cy + r), svgTransform);\n        var p3 = this.applyMatrix(new Point(cx - r, cy), svgTransform);\n        var p4 = this.applyMatrix(new Point(cx, cy - r), svgTransform);\n        var c1 = this.applyMatrix(new Point(cx + r, cy + factor * r), svgTransform);\n        var c2 = this.applyMatrix(new Point(cx + factor * r, cy + r), svgTransform);\n        var c4 = this.applyMatrix(new Point(cx - r, cy + factor * r), svgTransform);\n        var c6 = this.applyMatrix(new Point(cx - factor * r, cy - r), svgTransform);\n        var c8 = this.applyMatrix(new Point(cx + r, cy - factor * r), svgTransform);\n        var path = \"M \".concat(p1, \" C \").concat(c1, \" \").concat(c2, \" \").concat(p2, \" S \").concat(c4, \" \").concat(p3, \" S \").concat(c6, \" \").concat(p4, \" S \").concat(c8, \" \").concat(p1, \"z\");\n        result = this.rc.path(path, this.parseStyleConfig(circle, svgTransform));\n      }\n\n      this.postProcessElement(circle, result);\n    }\n    /**\r\n     * @private\r\n     * @param {SVGLineElement} line\r\n     * @param {SVGTransform?} svgTransform\r\n     */\n\n  }, {\n    key: \"drawLine\",\n    value: function drawLine(line, svgTransform) {\n      var p1 = new Point(line.x1.baseVal.value, line.y1.baseVal.value);\n      var tp1 = this.applyMatrix(p1, svgTransform);\n      var p2 = new Point(line.x2.baseVal.value, line.y2.baseVal.value);\n      var tp2 = this.applyMatrix(p2, svgTransform);\n\n      if (tp1.x === tp2.x && tp1.y === tp2.y) {\n        // zero-length line is not rendered\n        return;\n      }\n\n      this.postProcessElement(line, this.rc.line(tp1.x, tp1.y, tp2.x, tp2.y, this.parseStyleConfig(line, svgTransform)));\n      this.drawMarkers(line, [p1, p2], svgTransform);\n    }\n    /**\r\n     * @private\r\n     * @param {SVGSVGElement | SVGSymbolElement} element\r\n     * @param {SVGTransform?} svgTransform\r\n     */\n\n  }, {\n    key: \"drawRoot\",\n    value: function drawRoot(element, svgTransform) {\n      var width = parseFloat(element.getAttribute('width'));\n      var height = parseFloat(element.getAttribute('height'));\n\n      if (isNaN(width) || isNaN(height)) {\n        // use only if both are set\n        width = height = null;\n      }\n\n      this.processRoot(element, svgTransform, width, height);\n    }\n    /**\r\n     * @private\r\n     * @param {SVGUseElement} use\r\n     * @param {SVGTransform?} svgTransform\r\n     */\n\n  }, {\n    key: \"drawUse\",\n    value: function drawUse(use, svgTransform) {\n      var href = use.href.baseVal;\n\n      if (href.startsWith('#')) {\n        href = href.substring(1);\n      }\n\n      var defElement = this.idElements[href];\n\n      if (defElement) {\n        var useWidth, useHeight;\n\n        if (use.getAttribute('width') && use.getAttribute('height')) {\n          // Use elements can overwrite the width which is important if it is a nested SVG\n          useWidth = use.width.baseVal.value;\n          useHeight = use.height.baseVal.value;\n        } // We need to account for x and y attributes as well. Those change where the element is drawn.\n        // We can simply change the transform to include that.\n\n\n        var x = use.x.baseVal.value;\n        var y = use.y.baseVal.value;\n        var matrix = this.svg.createSVGMatrix().translate(x, y);\n        matrix = svgTransform ? svgTransform.matrix.multiply(matrix) : matrix; // the defsElement itself might have a transform that needs to be incorporated\n\n        var elementTransform = this.svg.createSVGTransformFromMatrix(matrix); // use elements must be processed in their context, particularly regarding\n        // the styling of them\n\n        if (!this.$useElementContext) {\n          this.$useElementContext = {\n            root: use,\n            referenced: defElement\n          };\n        } else {\n          var newContext = {\n            root: use,\n            referenced: defElement,\n            parentContext: Object.assign({}, this.$useElementContext)\n          };\n          this.$useElementContext = newContext;\n        } // draw the referenced element\n\n\n        this.processRoot(defElement, this.getCombinedTransform(defElement, elementTransform), useWidth, useHeight); // restore default context\n\n        if (this.$useElementContext.parentContext) {\n          this.$useElementContext = this.$useElementContext.parentContext;\n        } else {\n          this.$useElementContext = null;\n        }\n      }\n    }\n    /**\r\n     * @private\r\n     * @param {SVGPathElement} path\r\n     * @param {SVGTransform?} svgTransform\r\n     */\n\n  }, {\n    key: \"drawPath\",\n    value: function drawPath(path, svgTransform) {\n      var dataAttrs = path.getAttribute('d');\n      var pathData = // Parse path data and convert to absolute coordinates\n      new svg_pathdata__WEBPACK_IMPORTED_MODULE_1__[\"SVGPathData\"](dataAttrs).toAbs() // Normalize H and V to L commands - those cannot work with how we draw transformed paths otherwise\n      .transform(svg_pathdata__WEBPACK_IMPORTED_MODULE_1__[\"SVGPathDataTransformer\"].NORMALIZE_HVZ()) // Normalize S and T to Q and C commands - Rough.js has a bug with T where it expects 4 parameters instead of 2\n      .transform(svg_pathdata__WEBPACK_IMPORTED_MODULE_1__[\"SVGPathDataTransformer\"].NORMALIZE_ST()); // If there's a transform, transform the whole path accordingly\n\n      var transformedPathData = new svg_pathdata__WEBPACK_IMPORTED_MODULE_1__[\"SVGPathData\"]( // clone the commands, we might need them untransformed for markers\n      pathData.commands.map(function (cmd) {\n        return Object.assign({}, cmd);\n      }));\n\n      if (svgTransform) {\n        transformedPathData.transform(svg_pathdata__WEBPACK_IMPORTED_MODULE_1__[\"SVGPathDataTransformer\"].MATRIX(svgTransform.matrix.a, svgTransform.matrix.b, svgTransform.matrix.c, svgTransform.matrix.d, svgTransform.matrix.e, svgTransform.matrix.f));\n      }\n\n      var encodedPathData = Object(svg_pathdata__WEBPACK_IMPORTED_MODULE_1__[\"encodeSVGPath\"])(transformedPathData.commands);\n\n      if (encodedPathData.indexOf('undefined') !== -1) {\n        // DEBUG STUFF\n        console.error('broken path data');\n        debugger;\n        return;\n      }\n\n      this.postProcessElement(path, this.rc.path(encodedPathData, this.parseStyleConfig(path, svgTransform))); // https://www.w3.org/TR/SVG11/painting.html#MarkerProperties\n      // Note that for a ‘path’ element which ends with a closed sub-path,\n      // the last vertex is the same as the initial vertex on the given\n      // sub-path (same applies to polygon).\n\n      var points = [];\n      var currentSubPathBegin;\n      pathData.commands.forEach(function (cmd) {\n        switch (cmd.type) {\n          case svg_pathdata__WEBPACK_IMPORTED_MODULE_1__[\"SVGPathData\"].MOVE_TO:\n            var p = new Point(cmd.x, cmd.y);\n            points.push(p); // each moveto starts a new subpath\n\n            currentSubPathBegin = p;\n            break;\n\n          case svg_pathdata__WEBPACK_IMPORTED_MODULE_1__[\"SVGPathData\"].LINE_TO:\n          case svg_pathdata__WEBPACK_IMPORTED_MODULE_1__[\"SVGPathData\"].QUAD_TO:\n          case svg_pathdata__WEBPACK_IMPORTED_MODULE_1__[\"SVGPathData\"].SMOOTH_QUAD_TO:\n          case svg_pathdata__WEBPACK_IMPORTED_MODULE_1__[\"SVGPathData\"].CURVE_TO:\n          case svg_pathdata__WEBPACK_IMPORTED_MODULE_1__[\"SVGPathData\"].SMOOTH_CURVE_TO:\n          case svg_pathdata__WEBPACK_IMPORTED_MODULE_1__[\"SVGPathData\"].ARC:\n            points.push(new Point(cmd.x, cmd.y));\n            break;\n\n          case svg_pathdata__WEBPACK_IMPORTED_MODULE_1__[\"SVGPathData\"].HORIZ_LINE_TO:\n            points.push(new Point(cmd.x, 0));\n            break;\n\n          case svg_pathdata__WEBPACK_IMPORTED_MODULE_1__[\"SVGPathData\"].VERT_LINE_TO:\n            points.push(new Point(0, cmd.y));\n            break;\n\n          case svg_pathdata__WEBPACK_IMPORTED_MODULE_1__[\"SVGPathData\"].CLOSE_PATH:\n            if (currentSubPathBegin) {\n              points.push(currentSubPathBegin);\n            }\n\n            break;\n        }\n      });\n      this.drawMarkers(path, points, svgTransform);\n    }\n    /**\r\n     * @private\r\n     * @param {SVGRectElement} rect\r\n     * @param {SVGClipPathElement} container\r\n     * @param {SVGTransform?} svgTransform\r\n     */\n\n  }, {\n    key: \"applyRectClip\",\n    value: function applyRectClip(rect, container, svgTransform) {\n      var x = rect.x.baseVal.value;\n      var y = rect.y.baseVal.value;\n      var width = rect.width.baseVal.value;\n      var height = rect.height.baseVal.value;\n\n      if (width === 0 || height === 0) {\n        // zero-width or zero-height rect will not be rendered\n        return;\n      }\n\n      var rx = rect.hasAttribute('rx') ? rect.rx.baseVal.value : null;\n      var ry = rect.hasAttribute('ry') ? rect.ry.baseVal.value : null; // in the clip case, we can actually transform the entire\n      // canvas without distorting the hand-drawn style\n\n      if (this.renderMode === RenderMode.CANVAS) {\n        this.ctx.save();\n        this.applyGlobalTransform(svgTransform);\n\n        if (!rx && !ry) {\n          this.ctx.rect(x, y, width, height);\n        } else {\n          // Construct path for the rounded rectangle\n          var factor = 4 / 3 * (Math.sqrt(2) - 1);\n          this.ctx.moveTo(x + rx, y);\n          this.ctx.lineTo(x + width - rx, y);\n          this.ctx.bezierCurveTo(x + width - rx + factor * rx, y, x + width, y + factor * ry, x + width, y + ry);\n          this.ctx.lineTo(x + width, y + height - ry);\n          this.ctx.bezierCurveTo(x + width, y + height - ry + factor * ry, x + width - factor * rx, y + height, x + width - rx, y + height);\n          this.ctx.lineTo(x + rx, y + height);\n          this.ctx.bezierCurveTo(x + rx - factor * rx, y + height, x, y + height - factor * ry, x, y + height - ry);\n          this.ctx.lineTo(x, y + ry);\n          this.ctx.bezierCurveTo(x, y + factor * ry, x + factor * rx, y, x + rx, y);\n          this.ctx.closePath();\n        }\n\n        this.ctx.restore();\n      } else {\n        var clip = document.createElementNS('http://www.w3.org/2000/svg', 'rect');\n        clip.x.baseVal.value = x;\n        clip.y.baseVal.value = y;\n        clip.width.baseVal.value = width;\n        clip.height.baseVal.value = height;\n\n        if (rx) {\n          clip.rx.baseVal.value = rx;\n        }\n\n        if (ry) {\n          clip.ry.baseVal.value = ry;\n        }\n\n        this.applyGlobalTransform(svgTransform, clip);\n        container.appendChild(clip);\n      }\n    }\n    /**\r\n     * @private\r\n     * @param {SVGRectElement} rect\r\n     * @param {SVGTransform?} svgTransform\r\n     */\n\n  }, {\n    key: \"drawRect\",\n    value: function drawRect(rect, svgTransform) {\n      var x = rect.x.baseVal.value;\n      var y = rect.y.baseVal.value;\n      var width = rect.width.baseVal.value;\n      var height = rect.height.baseVal.value;\n\n      if (width === 0 || height === 0) {\n        // zero-width or zero-height rect will not be rendered\n        return;\n      }\n\n      var rx = rect.hasAttribute('rx') ? rect.rx.baseVal.value : null;\n      var ry = rect.hasAttribute('ry') ? rect.ry.baseVal.value : null;\n\n      if (rx || ry) {\n        // Negative values are an error and result in the default value\n        rx = rx < 0 ? 0 : rx;\n        ry = ry < 0 ? 0 : ry; // If only one of the two values is specified, the other has the same value\n\n        rx = rx === null ? ry : rx;\n        ry = ry === null ? rx : ry; // Clamp both values to half their sides' lengths\n\n        rx = Math.min(rx, width / 2);\n        ry = Math.min(ry, height / 2);\n      }\n\n      if ((this.isIdentityTransform(svgTransform) || this.isTranslationTransform(svgTransform)) && !rx && !ry) {\n        // Simple case; just a rectangle\n        var p1 = this.applyMatrix(new Point(x, y), svgTransform);\n        var p2 = this.applyMatrix(new Point(x + width, y + height), svgTransform);\n        var transformedWidth = p2.x - p1.x;\n        var transformedHeight = p2.y - p1.y;\n        this.postProcessElement(rect, this.rc.rectangle(p1.x, p1.y, transformedWidth, transformedHeight, this.parseStyleConfig(rect, svgTransform)));\n      } else {\n        var path = '';\n\n        if (!rx && !ry) {\n          var _p = this.applyMatrix(new Point(x, y), svgTransform);\n\n          var _p2 = this.applyMatrix(new Point(x + width, y), svgTransform);\n\n          var p3 = this.applyMatrix(new Point(x + width, y + height), svgTransform);\n          var p4 = this.applyMatrix(new Point(x, y + height), svgTransform); // No rounding, so just construct the respective path as a simple polygon\n\n          path += \"M \".concat(_p);\n          path += \"L \".concat(_p2);\n          path += \"L \".concat(p3);\n          path += \"L \".concat(p4);\n          path += \"z\";\n        } else {\n          var factor = 4 / 3 * (Math.sqrt(2) - 1); // Construct path for the rounded rectangle\n          // perform an absolute moveto operation to location (x+rx,y), where x is the value of the ‘rect’ element's ‘x’ attribute converted to user space, rx is the effective value of the ‘rx’ attribute converted to user space and y is the value of the ‘y’ attribute converted to user space\n\n          var _p3 = this.applyMatrix(new Point(x + rx, y), svgTransform);\n\n          path += \"M \".concat(_p3); // perform an absolute horizontal lineto operation to location (x+width-rx,y), where width is the ‘rect’ element's ‘width’ attribute converted to user space\n\n          var _p4 = this.applyMatrix(new Point(x + width - rx, y), svgTransform);\n\n          path += \"L \".concat(_p4); // perform an absolute elliptical arc operation to coordinate (x+width,y+ry), where the effective values for the ‘rx’ and ‘ry’ attributes on the ‘rect’ element converted to user space are used as the rx and ry attributes on the elliptical arc command, respectively, the x-axis-rotation is set to zero, the large-arc-flag is set to zero, and the sweep-flag is set to one\n\n          var p3c1 = this.applyMatrix(new Point(x + width - rx + factor * rx, y), svgTransform);\n          var p3c2 = this.applyMatrix(new Point(x + width, y + factor * ry), svgTransform);\n\n          var _p5 = this.applyMatrix(new Point(x + width, y + ry), svgTransform);\n\n          path += \"C \".concat(p3c1, \" \").concat(p3c2, \" \").concat(_p5); // We cannot use the arc command, since we no longer draw in the expected coordinates. So approximate everything with lines and béziers\n          // perform a absolute vertical lineto to location (x+width,y+height-ry), where height is the ‘rect’ element's ‘height’ attribute converted to user space\n\n          var _p6 = this.applyMatrix(new Point(x + width, y + height - ry), svgTransform);\n\n          path += \"L \".concat(_p6); // perform an absolute elliptical arc operation to coordinate (x+width-rx,y+height)\n\n          var p5c1 = this.applyMatrix(new Point(x + width, y + height - ry + factor * ry), svgTransform);\n          var p5c2 = this.applyMatrix(new Point(x + width - factor * rx, y + height), svgTransform);\n          var p5 = this.applyMatrix(new Point(x + width - rx, y + height), svgTransform);\n          path += \"C \".concat(p5c1, \" \").concat(p5c2, \" \").concat(p5); // perform an absolute horizontal lineto to location (x+rx,y+height)\n\n          var p6 = this.applyMatrix(new Point(x + rx, y + height), svgTransform);\n          path += \"L \".concat(p6); // perform an absolute elliptical arc operation to coordinate (x,y+height-ry)\n\n          var p7c1 = this.applyMatrix(new Point(x + rx - factor * rx, y + height), svgTransform);\n          var p7c2 = this.applyMatrix(new Point(x, y + height - factor * ry), svgTransform);\n          var p7 = this.applyMatrix(new Point(x, y + height - ry), svgTransform);\n          path += \"C \".concat(p7c1, \" \").concat(p7c2, \" \").concat(p7); // perform an absolute absolute vertical lineto to location (x,y+ry)\n\n          var p8 = this.applyMatrix(new Point(x, y + ry), svgTransform);\n          path += \"L \".concat(p8); // perform an absolute elliptical arc operation to coordinate (x+rx,y)\n\n          var p9c1 = this.applyMatrix(new Point(x, y + factor * ry), svgTransform);\n          var p9c2 = this.applyMatrix(new Point(x + factor * rx, y), svgTransform);\n          path += \"C \".concat(p9c1, \" \").concat(p9c2, \" \").concat(_p3);\n          path += 'z';\n        } // must use square line cap here so it looks like a rectangle. Default seems to be butt.\n\n\n        if (this.renderMode === RenderMode.CANVAS) {\n          this.ctx.save();\n          this.ctx.lineCap = 'square';\n        }\n\n        var result = this.rc.path(path, this.parseStyleConfig(rect, svgTransform));\n\n        if (this.renderMode === RenderMode.SVG && result) {\n          // same as for the canvas context, use square line-cap instead of default butt here\n          result.setAttribute('stroke-linecap', 'square');\n        }\n\n        this.postProcessElement(rect, result);\n\n        if (this.renderMode === RenderMode.CANVAS) {\n          this.ctx.restore();\n        }\n      }\n    }\n    /**\r\n     * @private\r\n     * @param {SVGImageElement} svgImage\r\n     * @param {SVGTransform?} svgTransform\r\n     */\n\n  }, {\n    key: \"drawImage\",\n    value: function drawImage(svgImage, svgTransform) {\n      var _this5 = this;\n\n      var href = svgImage.href.baseVal;\n      var x = svgImage.x.baseVal.value;\n      var y = svgImage.y.baseVal.value;\n      var width, height;\n\n      if (svgImage.getAttribute('width') && svgImage.getAttribute('height')) {\n        width = svgImage.width.baseVal.value;\n        height = svgImage.height.baseVal.value;\n      }\n\n      if (href.startsWith('data:') && href.indexOf('image/svg+xml') !== -1) {\n        // data:[<media type>][;charset=<character set>][;base64],<data>\n        var dataUrlRegex = /^data:([^,]*),(.*)/;\n        var match = dataUrlRegex.exec(href);\n\n        if (match.length > 2) {\n          var meta = match[1];\n          var svgString = match[2];\n          var isBase64 = meta.indexOf('base64') !== -1;\n          var isUtf8 = meta.indexOf('utf8') !== -1;\n\n          if (isBase64) {\n            svgString = btoa(svgString);\n          }\n\n          if (!isUtf8) {\n            svgString = decodeURIComponent(svgString);\n          }\n\n          var parser = new DOMParser();\n          var doc = parser.parseFromString(svgString, 'image/svg+xml');\n          var svg = doc.firstElementChild;\n          var matrix = this.svg.createSVGMatrix().translate(x, y);\n          matrix = svgTransform ? svgTransform.matrix.multiply(matrix) : matrix;\n          this.processRoot(svg, this.svg.createSVGTransformFromMatrix(matrix), width, height);\n          return;\n        }\n      } else {\n        var _matrix3 = this.svg.createSVGMatrix().translate(x, y);\n\n        _matrix3 = svgTransform ? svgTransform.matrix.multiply(_matrix3) : _matrix3;\n\n        if (this.renderMode === RenderMode.CANVAS) {\n          // we just draw the image 'as is' into the canvas\n          var dx = _matrix3.e;\n          var dy = _matrix3.f;\n          var img = new Image();\n\n          img.onload = function () {\n            _this5.ctx.drawImage(img, dx, dy);\n          };\n\n          img.src = href;\n        } else {\n          var imageClone = svgImage.cloneNode();\n          var container = document.createElementNS('http://www.w3.org/2000/svg', 'g');\n          this.applyGlobalTransform(svgTransform, container);\n          container.appendChild(imageClone);\n          this.postProcessElement(svgImage, container);\n        }\n      }\n    }\n    /**\r\n     * @private\r\n     * @param {SVGTextElement} text\r\n     * @param {SVGTransform?} svgTransform\r\n     */\n\n  }, {\n    key: \"drawText\",\n    value: function drawText(text, svgTransform) {\n      if (this.renderMode === RenderMode.SVG) {\n        var container = document.createElementNS('http://www.w3.org/2000/svg', 'g');\n        container.setAttribute('class', 'text-container');\n        this.applyGlobalTransform(svgTransform, container);\n        var textClone = text.cloneNode(true);\n\n        if (textClone.transform.baseVal.numberOfItems > 0) {\n          // remove transformation, since it is transformed globally by its parent container\n          textClone.transform.baseVal.clear();\n        }\n\n        var _style = textClone.getAttribute('style');\n\n        var cssFont = this.getCssFont(text, true);\n        textClone.setAttribute('style', _style ? cssFont + _style : cssFont);\n        container.appendChild(textClone);\n        this.postProcessElement(text, container);\n        return;\n      }\n\n      this.ctx.save();\n      var textLocation = new Point(this.getLengthInPx(text.x), this.getLengthInPx(text.y)); // text style\n\n      this.ctx.font = this.getCssFont(text);\n      var style = this.parseStyleConfig(text, svgTransform);\n\n      if (style.fill) {\n        this.ctx.fillStyle = style.fill;\n      }\n\n      var stroke = this.getEffectiveAttribute(text, 'stroke');\n      var hasStroke = stroke != 'none';\n\n      if (hasStroke) {\n        this.ctx.strokeStyle = style.stroke;\n        this.ctx.lineWidth = this.convertToPixelUnit(this.getEffectiveAttribute(text, 'stroke-width'));\n      }\n\n      var textAnchor = this.getEffectiveAttribute(text, 'text-anchor', this.$useElementContext);\n\n      if (textAnchor) {\n        this.ctx.textAlign = textAnchor !== 'middle' ? textAnchor : 'center';\n      } // apply the global transform\n\n\n      this.applyGlobalTransform(svgTransform); // consider dx/dy of the text element\n\n      var dx = this.getLengthInPx(text.dx);\n      var dy = this.getLengthInPx(text.dy);\n      this.ctx.translate(dx, dy);\n\n      if (text.childElementCount === 0) {\n        this.ctx.fillText(this.getTextContent(text), textLocation.x, textLocation.y, text.getComputedTextLength());\n\n        if (hasStroke) {\n          this.ctx.strokeText(this.getTextContent(text), textLocation.x, textLocation.y, text.getComputedTextLength());\n        }\n      } else {\n        var children = this.getNodeChildren(text);\n\n        for (var i = 0; i < children.length; i++) {\n          var child = children[i];\n\n          if (child.tagName === 'tspan') {\n            textLocation = new Point(this.getLengthInPx(child.x), this.getLengthInPx(child.y));\n\n            var _dx = this.getLengthInPx(child.dx);\n\n            var _dy = this.getLengthInPx(child.dy);\n\n            this.ctx.translate(_dx, _dy);\n            this.ctx.fillText(this.getTextContent(child), textLocation.x, textLocation.y);\n\n            if (hasStroke) {\n              this.ctx.strokeText(this.getTextContent(child), textLocation.x, textLocation.y);\n            }\n          }\n        }\n      }\n\n      this.ctx.restore();\n    }\n    /**\r\n     * Retrieves the text content from a text content element (text, tspan, ...)\r\n     * @private\r\n     * @param {SVGTextContentElement} element\r\n     * @returns {string}\r\n     */\n\n  }, {\n    key: \"getTextContent\",\n    value: function getTextContent(element) {\n      var content = element.textContent;\n\n      if (this.shouldNormalizeWhitespace(element)) {\n        content = content.replace(/[\\n\\r\\t ]+/g, ' ').trim();\n      } else {\n        content = content.replace(/\\r\\n|[\\n\\r\\t]/g, ' ');\n      }\n\n      return content;\n    }\n    /**\r\n     * Determines whether the given element has default white-space handling, i.e. normalization.\r\n     * Returns false if the element (or an ancestor) has xml:space='preserve'\r\n     * @private\r\n     * @param {SVGElement} element\r\n     * @returns {boolean}\r\n     */\n\n  }, {\n    key: \"shouldNormalizeWhitespace\",\n    value: function shouldNormalizeWhitespace(element) {\n      var xmlSpaceAttribute = null;\n\n      while (element !== null && element !== this.$svg && xmlSpaceAttribute === null) {\n        xmlSpaceAttribute = element.getAttribute('xml:space');\n\n        if (xmlSpaceAttribute === null) {\n          element = element.parentNode;\n        }\n      }\n\n      return xmlSpaceAttribute !== 'preserve'; // no attribute is also default handling\n    }\n    /**\r\n     * @private\r\n     * @param {SVGAnimatedLengthList} svgLengthList\r\n     * @return {number} length in pixels\r\n     */\n\n  }, {\n    key: \"getLengthInPx\",\n    value: function getLengthInPx(svgLengthList) {\n      if (svgLengthList && svgLengthList.baseVal.numberOfItems > 0) {\n        return svgLengthList.baseVal.getItem(0).value;\n      }\n\n      return 0;\n    }\n    /**\r\n     * @private\r\n     * @param {SVGTextElement} text\r\n     * @param {boolean?} asStyleString Formats the return value as inline style string\r\n     * @return {string}\r\n     */\n\n  }, {\n    key: \"getCssFont\",\n    value: function getCssFont(text, asStyleString) {\n      var cssFont = '';\n      var fontStyle = this.getEffectiveAttribute(text, 'font-style', this.$useElementContext);\n\n      if (fontStyle) {\n        cssFont += asStyleString ? \"font-style: \".concat(fontStyle, \";\") : fontStyle;\n      }\n\n      var fontWeight = this.getEffectiveAttribute(text, 'font-weight', this.$useElementContext);\n\n      if (fontWeight) {\n        cssFont += asStyleString ? \"font-weight: \".concat(fontWeight, \";\") : \" \".concat(fontWeight);\n      }\n\n      var fontSize = this.getEffectiveAttribute(text, 'font-size', this.$useElementContext);\n\n      if (fontSize) {\n        cssFont += asStyleString ? \"font-size: \".concat(fontSize, \";\") : \" \".concat(fontSize);\n      }\n\n      if (this.fontFamily) {\n        cssFont += asStyleString ? \"font-family: \".concat(this.fontFamily, \";\") : \" \".concat(this.fontFamily);\n      } else {\n        var fontFamily = this.getEffectiveAttribute(text, 'font-family', this.$useElementContext);\n\n        if (fontFamily) {\n          cssFont += asStyleString ? \"font-family: \".concat(this.fontFamily, \";\") : \" \".concat(this.fontFamily);\n        }\n      }\n\n      cssFont = cssFont.trim();\n      return cssFont;\n    }\n    /**\r\n     * Returns the Node's children, since Node.prototype.children is not available on all browsers.\r\n     * https://developer.mozilla.org/en-US/docs/Web/API/ParentNode/children\r\n     * @private\r\n     * @param {Node} element\r\n     * @returns {Array}\r\n     */\n\n  }, {\n    key: \"getNodeChildren\",\n    value: function getNodeChildren(element) {\n      if (typeof element.children !== 'undefined') {\n        return element.children;\n      }\n\n      var i = 0;\n      var node;\n      var nodes = element.childNodes;\n      var children = [];\n\n      while (node = nodes[i++]) {\n        if (node.nodeType === 1) {\n          children.push(node);\n        }\n      }\n\n      return children;\n    }\n  }]);\n\n  return Svg2Roughjs;\n}();\n\nvar SvgTextures = /*#__PURE__*/function () {\n  function SvgTextures() {\n    _classCallCheck(this, SvgTextures);\n  }\n\n  _createClass(SvgTextures, null, [{\n    key: \"pencilTextureFilter\",\n    get: function get() {\n      var filter = document.createElementNS('http://www.w3.org/2000/svg', 'filter');\n      filter.setAttribute('id', 'pencilTextureFilter');\n      filter.setAttribute('x', '0%');\n      filter.setAttribute('y', '0%');\n      filter.setAttribute('width', '100%');\n      filter.setAttribute('height', '100%');\n      filter.setAttribute('filterUnits', 'objectBoundingBox');\n      var feTurbulence = document.createElementNS('http://www.w3.org/2000/svg', 'feTurbulence');\n      feTurbulence.setAttribute('type', 'fractalNoise');\n      feTurbulence.setAttribute('baseFrequency', '2');\n      feTurbulence.setAttribute('numOctaves', '5');\n      feTurbulence.setAttribute('stitchTiles', 'stitch');\n      feTurbulence.setAttribute('result', 'f1');\n      filter.appendChild(feTurbulence);\n      var feColorMatrix = document.createElementNS('http://www.w3.org/2000/svg', 'feColorMatrix');\n      feColorMatrix.setAttribute('type', 'matrix');\n      feColorMatrix.setAttribute('values', '0 0 0 0 0, 0 0 0 0 0, 0 0 0 0 0, 0 0 0 -1.5 1.5');\n      feColorMatrix.setAttribute('result', 'f2');\n      filter.appendChild(feColorMatrix);\n      var feComposite = document.createElementNS('http://www.w3.org/2000/svg', 'feComposite');\n      feComposite.setAttribute('operator', 'in');\n      feComposite.setAttribute('in', 'SourceGraphic');\n      feComposite.setAttribute('in2', 'f2');\n      feComposite.setAttribute('result', 'f3');\n      filter.appendChild(feComposite);\n      return filter;\n    }\n  }]);\n\n  return SvgTextures;\n}();\n\n//# sourceURL=webpack:///./node_modules/svg2roughjs/index.js?");

/***/ })

}]);